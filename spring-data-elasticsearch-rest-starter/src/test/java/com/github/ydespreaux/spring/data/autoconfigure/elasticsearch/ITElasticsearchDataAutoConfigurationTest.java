/* * Copyright (C) 2018 Yoann Despréaux * * This program is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; see the file COPYING . If not, write to the * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. * * Please send bugreports with examples or suggestions to yoann.despreaux@believeit.fr */package com.github.ydespreaux.spring.data.autoconfigure.elasticsearch;import com.github.ydespreaux.spring.data.elasticsearch.core.ElasticsearchOperations;import org.elasticsearch.action.admin.indices.template.get.GetIndexTemplatesRequest;import org.elasticsearch.action.admin.indices.template.get.GetIndexTemplatesResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.client.RestHighLevelClient;import org.elasticsearch.cluster.metadata.IndexTemplateMetaData;import org.elasticsearch.common.settings.Settings;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.context.ApplicationContext;import org.springframework.test.context.junit4.SpringRunner;import java.io.IOException;import java.util.List;import static org.hamcrest.Matchers.*;import static org.junit.Assert.assertThat;/** * @author Yoann Despréaux * @since 1.0.0 */@RunWith(SpringRunner.class)@SpringBootTest(classes = {        RestClientAutoConfiguration.class,        ElasticsearchDataAutoConfiguration.class})public class ITElasticsearchDataAutoConfigurationTest {    @Autowired    private RestHighLevelClient client;    @Autowired    private ApplicationContext context;    @Test    public void context() throws Exception {        assertThat(context.getBean(ElasticsearchOperations.class), is(notNullValue()));        IndexTemplateMetaData template = getTemplate(client, "article");        assertThat(template, is(notNullValue()));        assertThat(template.getName(), is(equalTo("article")));        assertThat(template.getPatterns().size(), is(equalTo(1)));        assertThat(template.getPatterns().get(0), is(equalTo("article-*")));        Settings settings = template.getSettings();        assertThat(settings, is(notNullValue()));        assertThat(settings.get("index.refresh_interval"), is(equalTo("1s")));        assertThat(settings.get("index.number_of_shards"), is(equalTo("1")));        assertThat(settings.get("index.number_of_replicas"), is(equalTo("1")));        assertThat(settings.get("index.store.type"), is(equalTo("fs")));        assertThat(template.getAliases().containsKey("articles"), is(true));        assertThat(template.getMappings().containsKey("article"), is(true));    }    /**     * @param templateName     * @return     * @throws IOException     */    private IndexTemplateMetaData getTemplate(RestHighLevelClient client, String templateName) throws IOException {        GetIndexTemplatesResponse response = client.indices().getTemplate(new GetIndexTemplatesRequest(templateName), RequestOptions.DEFAULT);        List<IndexTemplateMetaData> templates = response.getIndexTemplates();        if (templates.isEmpty()) {            return null;        }        return templates.get(0);    }}