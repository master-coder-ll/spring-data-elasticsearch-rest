/* * Copyright (C) 2018 Yoann Despréaux * * This program is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; see the file COPYING . If not, write to the * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. * * Please send bugreports with examples or suggestions to yoann.despreaux@believeit.fr */package com.github.ydespreaux.spring.data.elasticsearch.reactive.repository.support;import com.github.ydespreaux.spring.data.elasticsearch.client.ClientLoggerAspect;import com.github.ydespreaux.spring.data.elasticsearch.configuration.reactive.ReactiveElasticsearchConfiguration;import com.github.ydespreaux.spring.data.elasticsearch.core.query.Criteria;import com.github.ydespreaux.spring.data.elasticsearch.entities.Article;import com.github.ydespreaux.spring.data.elasticsearch.entities.ArticleInfo;import com.github.ydespreaux.spring.data.elasticsearch.reactive.repositories.template.ReactiveArticleRepository;import com.github.ydespreaux.spring.data.elasticsearch.repository.config.EnableReactiveElasticsearchRepositories;import org.elasticsearch.index.query.QueryBuilders;import org.junit.jupiter.api.Tag;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.EnableAutoConfiguration;import org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.EnableAspectJAutoProxy;import org.springframework.context.annotation.Profile;import org.springframework.data.domain.Sort;import reactor.test.StepVerifier;import java.util.Comparator;import java.util.UUID;import static org.hamcrest.MatcherAssert.assertThat;import static org.hamcrest.Matchers.*;/** * @author Yoann Despréaux * @since 1.0.0 */@Tag("integration-nested")@SpringBootTest(classes = {        RestClientAutoConfiguration.class,        ReactiveArticleRepositoryTest.ElasticsearchConfiguration.class})@Profile("test-no-template")public class ReactiveArticleRepositoryTest {    @SuppressWarnings("SpringJavaInjectionPointsAutowiringInspection")    @Autowired    private ReactiveArticleRepository repository;    @Test    void findById() {        StepVerifier.create(repository.findById("1"))                .consumeNextWith(articleLoaded -> {                    assertThat(articleLoaded.getDocumentId(), is(equalTo("1")));                    assertThat(articleLoaded.getName(), is(equalTo("Article1")));                    assertThat(articleLoaded.getDescription(), is(equalTo("Description de l'article 1 - City")));                    assertThat(articleLoaded.getEntrepot(), is(equalTo(Article.EnumEntrepot.E1)));                    assertThat(articleLoaded.getDocumentVersion(), is(equalTo(1L)));                })                .verifyComplete();    }    @Test    void existsById() {        StepVerifier.create(this.repository.existsById("1"))                .expectNext(true)                .verifyComplete();    }    @Test    void findByIdNotFound() {        StepVerifier.create(this.repository.findById(UUID.randomUUID().toString()))                .verifyComplete();    }    @Test    void notExistsById() {        StepVerifier.create(this.repository.existsById(UUID.randomUUID().toString()))                .expectNext(false)                .verifyComplete();    }    @Test    void findByNameQueryNotExists() {        StepVerifier.create(this.repository.findByNameQuery("Article-undefined"))                .verifyComplete();    }    @Test    void searchByEntrepot_withoutSort() {        StepVerifier.create(this.repository.findByQuery(QueryBuilders.matchQuery("entrepot", "E1"), (Sort) null))//                .expectNextCount(2)                .consumeNextWith(article -> {                    assertThat(((Article) article).getDocumentId(), is(notNullValue()));                    assertThat(((Article) article).getDocumentVersion(), is(notNullValue()));                })                .consumeNextWith(article -> {                    assertThat(((Article) article).getDocumentId(), is(notNullValue()));                    assertThat(((Article) article).getDocumentVersion(), is(notNullValue()));                })                .verifyComplete();//        List<Article> result = this.repository.findByQuery(QueryBuilders.matchQuery("entrepot", "E1"), (Sort) null);//        assertThat(result.size(), is(equalTo(3)));//        for (Article article : result) {//            assertThat(article.getDocumentId(), is(notNullValue()));//            assertThat(article.getDocumentVersion(), is(notNullValue()));//        }    }    @Test    void searchByEntrepot_withSort() {        StepVerifier.create(this.repository.findByQuery(QueryBuilders.matchQuery("entrepot", "E1"), Sort.by(Sort.Direction.DESC, "name")))//                .expectNextCount(2)                .consumeNextWith(article -> {                    assertThat(((Article) article).getName(), is(equalTo("Article4")));                    assertThat(((Article) article).getDocumentId(), is(notNullValue()));                    assertThat(((Article) article).getDocumentVersion(), is(notNullValue()));                })                .consumeNextWith(article -> {                    assertThat(((Article) article).getName(), is(equalTo("Article1")));                    assertThat(((Article) article).getDocumentId(), is(notNullValue()));                    assertThat(((Article) article).getDocumentVersion(), is(notNullValue()));                })                .verifyComplete();//        List<Article> result = this.repository.findByQuery(QueryBuilders.matchQuery("entrepot", "E1"), Sort.by(Sort.Direction.DESC, "name"));//        assertThat(result.size(), is(equalTo(3)));//        for (Article article : result) {//            assertThat(article.getDocumentId(), is(notNullValue()));//            assertThat(article.getDocumentVersion(), is(notNullValue()));//        }//        assertThat(result.get(0).getName(), is(equalTo("Article5")));//        assertThat(result.get(1).getName(), is(equalTo("Article4")));//        assertThat(result.get(2).getName(), is(equalTo("Article1")));    }    @Test    void searchArticleInfoByEntrepot_withSort() {        StepVerifier.create(this.repository.findByQuery(QueryBuilders.matchQuery("entrepot", "E1"), Sort.by(Sort.Direction.DESC, "name"), ArticleInfo.class))//                .expectNextCount(2)                .consumeNextWith(article -> {                    assertThat(((ArticleInfo) article).getName(), is(equalTo("Article4")));                    assertThat(((ArticleInfo) article).getDocumentId(), is(notNullValue()));                })                .consumeNextWith(article -> {                    assertThat(((ArticleInfo) article).getName(), is(equalTo("Article1")));                    assertThat(((ArticleInfo) article).getDocumentId(), is(notNullValue()));                })                .verifyComplete();//        List<ArticleInfo> result = this.repository.findByQuery(QueryBuilders.matchQuery("entrepot", "E1"), Sort.by(Sort.Direction.DESC, "name"), ArticleInfo.class);//        assertThat(result.size(), is(equalTo(3)));//        for (ArticleInfo article : result) {//            assertThat(article.getDocumentId(), is(notNullValue()));//        }//        assertThat(result.get(0).getName(), is(equalTo("Article5")));//        assertThat(result.get(1).getName(), is(equalTo("Article4")));//        assertThat(result.get(2).getName(), is(equalTo("Article1")));    }    @Test    void searchByDescription_withSort() {        StepVerifier.create(this.repository.findByQuery(QueryBuilders.matchPhraseQuery("description", "Description"), Sort.by(Sort.Direction.ASC, "name")))                .expectNextCount(50L)                .verifyComplete();//        List<Article> result = this.repository.findByQuery(QueryBuilders.matchPhraseQuery("description", "Description"), Sort.by(Sort.Direction.ASC, "name"));//        assertThat(result.size(), is(equalTo(5)));//        for (Article article : result) {//            assertThat(article.getDocumentId(), is(notNullValue()));//            assertThat(article.getDocumentVersion(), is(notNullValue()));//        }//        assertThat(result.get(0).getName(), is(equalTo("Article1")));//        assertThat(result.get(1).getName(), is(equalTo("Article2")));//        assertThat(result.get(2).getName(), is(equalTo("Article3")));//        assertThat(result.get(3).getName(), is(equalTo("Article4")));//        assertThat(result.get(4).getName(), is(equalTo("Article5")));    }    @Test    void searchByAllFields_1_withSort() {        StepVerifier.create(this.repository.findByQuery(QueryBuilders.matchPhraseQuery("search_fields", "City"), Sort.by(Sort.Direction.ASC, "name")))//                .expectNextCount(1)                .consumeNextWith(article -> {                    assertThat(((Article) article).getName(), is(equalTo("Article1")));                    assertThat(((Article) article).getDocumentId(), is(notNullValue()));                    assertThat(((Article) article).getDocumentVersion(), is(notNullValue()));                })                .verifyComplete();//        List<Article> result = this.repository.findByQuery(QueryBuilders.matchPhraseQuery("search_fields", "City"), Sort.by(Sort.Direction.ASC, "name"));//        assertThat(result.size(), is(equalTo(1)));//        for (Article article : result) {//            assertThat(article.getDocumentId(), is(notNullValue()));//            assertThat(article.getDocumentVersion(), is(notNullValue()));//        }//        assertThat(result.get(0).getName(), is(equalTo("Article1")));    }    @Test    void searchByAllFields_2_withSort() {        StepVerifier.create(this.repository.findByQuery(QueryBuilders.matchPhraseQuery("search_fields", "E3"), Sort.by(Sort.Direction.ASC, "name")).sort(new ArticleComparator()))//                .expectNextCount(4)                .consumeNextWith(article -> {                    assertThat(article.getName(), is(equalTo("Article3")));                    assertThat(article.getDocumentId(), is(notNullValue()));                    assertThat(article.getDocumentVersion(), is(notNullValue()));                })                .consumeNextWith(article -> {                    assertThat(article.getName(), is(equalTo("Article7")));                    assertThat(article.getDocumentId(), is(notNullValue()));                    assertThat(article.getDocumentVersion(), is(notNullValue()));                })                .consumeNextWith(article -> {                    assertThat(article.getName(), is(equalTo("Article8")));                    assertThat(article.getDocumentId(), is(notNullValue()));                    assertThat(article.getDocumentVersion(), is(notNullValue()));                })                .consumeNextWith(article -> {                    assertThat(article.getName(), is(equalTo("Article9")));                    assertThat(article.getDocumentId(), is(notNullValue()));                    assertThat(article.getDocumentVersion(), is(notNullValue()));                })                .verifyComplete();    }    @Test    void findArticleByEntrepotOrderByNameDesc() {        StepVerifier.create(this.repository.findArticleByEntrepotOrderByNameDesc(Article.EnumEntrepot.E1))//                .expectNextCount(2)                .consumeNextWith(article -> {                    assertThat(article.getName(), is(equalTo("Article4")));                    assertThat(article.getDocumentId(), is(notNullValue()));                    assertThat(article.getDocumentVersion(), is(notNullValue()));                })                .consumeNextWith(article -> {                    assertThat(article.getName(), is(equalTo("Article1")));                    assertThat(article.getDocumentId(), is(notNullValue()));                    assertThat(article.getDocumentVersion(), is(notNullValue()));                })                .verifyComplete();//        List<Article> result = this.repository.findArticleByEntrepotOrderByNameDesc(Article.EnumEntrepot.E1);//        assertThat(result.size(), is(equalTo(3)));//        for (Article article : result) {//            assertThat(article.getDocumentId(), is(notNullValue()));//            assertThat(article.getDocumentVersion(), is(notNullValue()));//        }//        assertThat(result.get(0).getName(), is(equalTo("Article5")));//        assertThat(result.get(1).getName(), is(equalTo("Article4")));//        assertThat(result.get(2).getName(), is(equalTo("Article1")));    }    @Test    void count() {        StepVerifier.create(this.repository.count())                .expectNext(50L)                .verifyComplete();//        assertThat(this.repository.count(), is(equalTo(5L)));    }    @Test    void countByCriteria() {        StepVerifier.create(this.repository.count(Criteria.where("entrepot").is(Article.EnumEntrepot.E1)))                .expectNext(2L)                .verifyComplete();//        assertThat(this.repository.count(Criteria.where("entrepot").is(Article.EnumEntrepot.E1)), is(equalTo(3L)));    }    @Test    void countByQuery() {        StepVerifier.create(this.repository.count(QueryBuilders.matchAllQuery()))                .expectNext(50L)                .verifyComplete();//        assertThat(this.repository.count(QueryBuilders.matchAllQuery()), is(equalTo(5L)));    }    @Test    void countByEntrepot() {        StepVerifier.create(this.repository.countArticleByEntrepot(Article.EnumEntrepot.E1))                .expectNext(2L)                .verifyComplete();//        assertThat(this.repository.countArticleByEntrepot(Article.EnumEntrepot.E1), is(equalTo(3L)));    }    @Test    void countByDescription() {        StepVerifier.create(this.repository.countByDescriptionContains("3"))                .expectNext(1L)                .verifyComplete();//        assertThat(this.repository.countByDescriptionContains("3"), is(equalTo(1L)));    }    @Test    void searchWithOrCriteria() {        StepVerifier.create(this.repository.findByQuery(Criteria.where("name").is("Article1").or("name").is("Article2"), Sort.by(Sort.Direction.ASC, "name")))                .consumeNextWith(article -> assertThat(((Article) article).getName(), is(equalTo("Article1"))))                .consumeNextWith(article -> assertThat(((Article) article).getName(), is(equalTo("Article2"))))                .verifyComplete();    }    @Test    void searchWithNegativeCriteria() {        StepVerifier.create(this.repository.findByQuery(Criteria.where("name").is("Article1").not(), Sort.by(Sort.Direction.ASC, "name")))                .expectNextCount(49L)                .verifyComplete();//        List<Article> result = this.repository.findByQuery(Criteria.where("name").is("Article1").not(), Sort.by(Sort.Direction.ASC, "name"));//        assertThat(result.size(), is(equalTo(4)));//        assertThat(result.get(0).getName(), is(equalTo("Article2")));//        assertThat(result.get(1).getName(), is(equalTo("Article3")));//        assertThat(result.get(2).getName(), is(equalTo("Article4")));//        assertThat(result.get(3).getName(), is(equalTo("Article5")));    }    @Test    void searchWithCriteriaByNameAndEntrepot() {        StepVerifier.create(this.repository.findByQuery(Criteria.where("name").is("Article1").and("entrepot").is(Article.EnumEntrepot.E1.name()), Sort.by(Sort.Direction.ASC, "name")))                .consumeNextWith(article -> assertThat(((Article) article).getName(), is(equalTo("Article1"))))                .verifyComplete();    }    @Test    void findByEntrepot() {        StepVerifier.create(this.repository.findByEntrepot(Article.EnumEntrepot.E1))                .expectNextCount(2L)                .verifyComplete();//        List<Article> result = this.repository.findByEntrepot(Article.EnumEntrepot.E1);//        assertThat(result.size(), is(equalTo(3)));    }    @Test    void findByEntrepotOrderByNameAsc() {        StepVerifier.create(this.repository.findByEntrepotOrderByNameAsc(Article.EnumEntrepot.E1))                .consumeNextWith(article -> assertThat(article.getName(), is(equalTo("Article1"))))                .consumeNextWith(article -> assertThat(article.getName(), is(equalTo("Article4"))))                .verifyComplete();//        List<Article> result = this.repository.findByEntrepotOrderByNameAsc(Article.EnumEntrepot.E1);//        assertThat(result.size(), is(equalTo(3)));//        assertThat(result.get(0).getName(), is(equalTo("Article1")));//        assertThat(result.get(1).getName(), is(equalTo("Article4")));//        assertThat(result.get(2).getName(), is(equalTo("Article5")));    }    @Test    void findByName() {        StepVerifier.create(this.repository.findByName("Article1"))                .consumeNextWith(article -> assertThat(article.getName(), is(equalTo("Article1"))))                .verifyComplete();    }    @Test    void findByNameQuery() {        StepVerifier.create(this.repository.findByNameQuery("Article1"))                .consumeNextWith(article -> assertThat(article.getName(), is(equalTo("Article1"))))                .verifyComplete();    }    @Test    void findByEntrepotQuery() {        StepVerifier.create(this.repository.findByEntrepotQuery(Article.EnumEntrepot.E1))                .expectNextCount(2L)                .verifyComplete();    }    @Configuration    @EnableAspectJAutoProxy    @EnableAutoConfiguration    @EnableReactiveElasticsearchRepositories(            basePackages = "com.github.ydespreaux.spring.data.elasticsearch.reactive.repositories.template",            namedQueriesLocation = "classpath:named-queries/*-named-queries.properties")    static class ElasticsearchConfiguration extends ReactiveElasticsearchConfiguration {        @Bean        ClientLoggerAspect clientLoggerAspect() {            return new ClientLoggerAspect();        }    }    private static class ArticleComparator implements Comparator<Article> {        @Override        public int compare(Article article, Article t1) {            return article.getName().compareTo(t1.getName());        }    }}