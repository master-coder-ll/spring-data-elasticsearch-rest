/* * Copyright (C) 2018 Yoann Despréaux * * This program is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; see the file COPYING . If not, write to the * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. * * Please send bugreports with examples or suggestions to yoann.despreaux@believeit.fr */package com.github.ydespreaux.spring.data.elasticsearch.core;import com.github.ydespreaux.spring.data.elasticsearch.Versions;import com.github.ydespreaux.spring.data.elasticsearch.client.ClientLoggerAspect;import com.github.ydespreaux.spring.data.elasticsearch.configuration.ReactiveElasticsearchConfiguration;import com.github.ydespreaux.spring.data.elasticsearch.core.query.NativeSearchQuery;import com.github.ydespreaux.spring.data.elasticsearch.entities.*;import com.github.ydespreaux.testcontainers.elasticsearch.ElasticsearchContainer;import org.elasticsearch.action.admin.indices.alias.Alias;import org.elasticsearch.index.query.QueryBuilders;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Tag;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.EnableAspectJAutoProxy;import org.springframework.test.annotation.DirtiesContext;import org.testcontainers.junit.jupiter.Container;import org.testcontainers.junit.jupiter.Testcontainers;import reactor.core.publisher.Flux;import reactor.test.StepVerifier;import java.time.LocalDate;import java.util.Arrays;import java.util.List;import static org.hamcrest.MatcherAssert.assertThat;import static org.hamcrest.Matchers.*;/** * @author Yoann Despréaux * @since 1.0.0 */@Tag("integration")@DirtiesContext@SpringBootTest(classes = {        RestClientAutoConfiguration.class,        ReactiveElasticsearchTemplateTest.ElasticsearchConfiguration.class})@Testcontainerspublic class ReactiveElasticsearchTemplateTest {    @Container    public static final ElasticsearchContainer elasticContainer = new ElasticsearchContainer(Versions.ELASTICSEARCH_VERSION)            .withConfigDirectory("elastic-config");    private static final String INDEX_BOOK_NAME = "books";    private static final String INDEX1_NAME = "index1";    private static final String INDEX2_NAME = "index2";    private static final String INDEX3_NAME = "index3";    @Configuration    @EnableAspectJAutoProxy    static class ElasticsearchConfiguration extends ReactiveElasticsearchConfiguration {        @Bean        ClientLoggerAspect clientLoggerAspect() {            return new ClientLoggerAspect();        }    }    @Autowired    private ReactiveElasticsearchOperations reactiveOperations;    @Autowired    private ElasticsearchOperations operations;    private List<Book> data = null;    @BeforeEach    void onSetup() {        this.data = initializeData();    }    @Test    void indexExists(){        operations.createIndex(INDEX3_NAME);        StepVerifier.create(reactiveOperations.indexExists(INDEX3_NAME))                .expectNext(true)                .verifyComplete();    }    @Test    void indexExistsNotDefined(){        StepVerifier.create(reactiveOperations.indexExists("INDEX_UNKNOWN"))                .expectNext(false)                .verifyComplete();    }    @Test    void createIndex(){        StepVerifier.create(reactiveOperations.createIndex(INDEX1_NAME))                .expectNext(true)                .verifyComplete();        StepVerifier.create(reactiveOperations.indexExists(INDEX1_NAME))                .expectNext(true)                .verifyComplete();    }    @Test    void createIndexWithAlias(){        StepVerifier.create(reactiveOperations.createIndex(new Alias("my-alias"), INDEX2_NAME))                .expectNext(true)                .verifyComplete();        StepVerifier.create(reactiveOperations.indexExists(INDEX2_NAME))                .expectNext(true)                .verifyComplete();    }    private static final String INDEX_BOOK_PATH = "classpath:indices/book.index";    @Test    void createIndexWithSettingsAndMapping(){        StepVerifier.create(reactiveOperations.createIndexWithSettingsAndMapping("book-with-settings", INDEX_BOOK_PATH))                .expectNext(true)                .verifyComplete();        StepVerifier.create(reactiveOperations.indexExists("book-with-settings"))                .expectNext(true)                .verifyComplete();    }    @Test    void createIndexByClass() {        StepVerifier.create(reactiveOperations.createIndex(SampleEntity.class))                .expectNext(true)                .verifyComplete();    }    @Test    void createIndexTimeBasedByClass() {        StepVerifier.create(reactiveOperations.createIndex(Article.class))            .expectNext(true)            .verifyComplete();    }    @Test    void createIndexWithSettingsAndMappingByClass() {        StepVerifier.create(reactiveOperations.createIndex(Music.class))                .expectNext(true)                .verifyComplete();    }    @Test    void createRolloverIndexWithSettingsAndMappingByClass() {        StepVerifier.create(reactiveOperations.createIndex(VehicleEvent.class))                .expectNext(true)                .verifyComplete();    }    @Test    void deleteIndexByName(){        this.operations.createIndex("index-for-delete");        this.operations.refresh("index-for-delete");        StepVerifier.create(reactiveOperations.deleteIndexByName("index-for-delete"))                .expectNext(true)                .verifyComplete();        StepVerifier.create(reactiveOperations.indexExists("index-for-delete"))                .expectNext(false)                .verifyComplete();    }    @Test    void deleteIndexByNameNotFound(){        StepVerifier.create(reactiveOperations.deleteIndexByName("index-nf-for-delete"))                .expectNext(false)                .verifyComplete();    }    @Test    void deleteIndexByAlias(){        Alias alias = new Alias("alias-for-delete");        for (int i = 1; i<6; i++) {            this.operations.createIndex(alias, "index"+i+"-for-delete");        }        this.operations.refresh("alias-for-delete");        StepVerifier.create(reactiveOperations.deleteIndexByAlias("alias-for-delete"))                .expectNext(true)                .verifyComplete();        for (int i = 1; i< 6; i++) {            StepVerifier.create(reactiveOperations.indexExists("index"+i+"-for-delete"))                    .expectNext(false)                    .verifyComplete();        }    }    @Test    void refreshIndexByName(){        this.operations.createIndex("index-for-refresh");        StepVerifier.create(reactiveOperations.refresh("index-for-refresh"))                .expectNext()                .verifyComplete();    }    @Test    void refreshWithIndexNotFound(){        StepVerifier.create(reactiveOperations.refresh("index-unknown"))                .expectNext()                .verifyComplete();    }    @Test    void indexWithId() {        Book expected = createBook("2", "Lucky Luck", "Lucky Luck chez les indiens", 10d, LocalDate.of(2010, 5, 12));        StepVerifier.create(this.reactiveOperations.index(expected, Book.class))                .assertNext(actual -> {                    assertThat(actual.getDocumentId(), is(equalTo(expected.getDocumentId())));                    assertThat(actual.getVersion(), is(notNullValue()));                })                .verifyComplete();    }    @Test    void indexWithoutId() {        Book expected = createBook(null, "Lucky Luck", "Lucky Luck et les Daltons", 10d, LocalDate.of(2008, 5, 12));        StepVerifier.create(this.reactiveOperations.index(expected, Book.class))                .assertNext(actual -> {                    assertThat(actual.getDocumentId(), is(notNullValue()));                    assertThat(actual.getVersion(), is(equalTo(1L)));                })                .verifyComplete();    }    @Test    void findById() {        Book expected = this.data.get(0);        StepVerifier.create(this.reactiveOperations.findById(expected.getDocumentId(), Book.class))                .assertNext(actual -> {                    assertThat(actual.getDocumentId(), is(equalTo(expected.getDocumentId())));                    assertThat(actual.getVersion(), is(notNullValue()));                    assertThat(actual.getTitle(), is(equalTo(expected.getTitle())));                    assertThat(actual.getDescription(), is(equalTo(expected.getDescription())));                    assertThat(actual.getPrice(), is(equalTo(expected.getPrice())));                    assertThat(actual.getPublication(), is(equalTo(expected.getPublication())));                })                .verifyComplete();    }    @Test    void findByIdNotfound() {        StepVerifier.create(this.reactiveOperations.findById("-1", Book.class))                .verifyComplete();    }    @Test    void findByIdWithIndexNotfound() {        StepVerifier.create(this.reactiveOperations.findById("1", SampleEntity.class))                .verifyComplete();    }    @Test    void bulkIndexWithEntityClass() {        List<Book> books = Arrays.asList(                createBook("bulk-1", "Mon livre 1", "Ma description 1", 10d, null),                createBook("bulk-2", "Mon livre 2", "Ma description 2", 10d, null),                createBook("bulk-3", "Mon livre 3", "Ma description 3", 10d, null),                createBook("bulk-4", "Mon livre 4", "Ma description 4", 10d, null),                createBook("bulk-5", "Mon livre 5", "Ma description 5", 10d, null)        );        StepVerifier.create(reactiveOperations.bulkIndex(books, Book.class))                .assertNext(book -> {                    assertThat(book.getDocumentId(), is(equalTo("bulk-1")));                    assertThat(book.getVersion(), is(equalTo(1L)));                })                .assertNext(book -> {                    assertThat(book.getDocumentId(), is(equalTo("bulk-2")));                    assertThat(book.getVersion(), is(equalTo(1L)));                })                .assertNext(book -> {                    assertThat(book.getDocumentId(), is(equalTo("bulk-3")));                    assertThat(book.getVersion(), is(equalTo(1L)));                })                .assertNext(book -> {                    assertThat(book.getDocumentId(), is(equalTo("bulk-4")));                    assertThat(book.getVersion(), is(equalTo(1L)));                })                .assertNext(book -> {                    assertThat(book.getDocumentId(), is(equalTo("bulk-5")));                    assertThat(book.getVersion(), is(equalTo(1L)));                })                .verifyComplete();    }    @Test    void bulkIndex() {        List<Book> books = Arrays.asList(                createBook("bulk-6", "Mon livre 6", "Ma description 6", 10d, null),                createBook("bulk-7", "Mon livre 7", "Ma description 7", 10d, null),                createBook("bulk-8", "Mon livre 8", "Ma description 8", 10d, null),                createBook("bulk-9", "Mon livre 9", "Ma description 9", 10d, null),                createBook("bulk-10", "Mon livre 10", "Ma description 10", 10d, null)        );        StepVerifier.create(reactiveOperations.bulkIndex(books))                .assertNext(book -> {                    assertThat(((Book)book).getDocumentId(), is(equalTo("bulk-6")));                    assertThat(((Book)book).getVersion(), is(equalTo(1L)));                })                .assertNext(book -> {                    assertThat(((Book)book).getDocumentId(), is(equalTo("bulk-7")));                    assertThat(((Book)book).getVersion(), is(equalTo(1L)));                })                .assertNext(book -> {                    assertThat(((Book)book).getDocumentId(), is(equalTo("bulk-8")));                    assertThat(((Book)book).getVersion(), is(equalTo(1L)));                })                .assertNext(book -> {                    assertThat(((Book)book).getDocumentId(), is(equalTo("bulk-9")));                    assertThat(((Book)book).getVersion(), is(equalTo(1L)));                })                .assertNext(book -> {                    assertThat(((Book)book).getDocumentId(), is(equalTo("bulk-10")));                    assertThat(((Book)book).getVersion(), is(equalTo(1L)));                })                .verifyComplete();    }    @Test    void deleteAll() {        this.operations.bulkIndex(Arrays.asList(                createBook("deleteAll-1", "Mon livre 6", "Ma description 6", 10d, null),                createBook("deleteAll-2", "Mon livre 7", "Ma description 7", 10d, null),                createBook("deleteAll-3", "Mon livre 8", "Ma description 8", 10d, null),                createBook("deleteAll-4", "Mon livre 9", "Ma description 9", 10d, null),                createBook("deleteAll-5", "Mon livre 10", "Ma description 10", 10d, null)        ), Book.class);        this.operations.refresh(Book.class);        StepVerifier.create(this.reactiveOperations.deleteAll(Book.class))                .verifyComplete();        this.operations.refresh(Book.class);        assertThat(this.operations.count(new NativeSearchQuery(QueryBuilders.matchAllQuery()), Book.class), is(equalTo(0L)));    }    @Test    void deleteAllByCollection() {        this.operations.bulkIndex(Arrays.asList(                createBook("deleteAllCollections-1", "Mon livre 6", "Ma description 6", 10d, null),                createBook("deleteAllCollections-2", "Mon livre 7", "Ma description 7", 10d, null),                createBook("deleteAllCollections-3", "Mon livre 8", "Ma description 8", 10d, null),                createBook("deleteAllCollections-4", "Mon livre 9", "Ma description 9", 10d, null),                createBook("deleteAllCollections-5", "Mon livre 10", "Ma description 10", 10d, null)        ), Book.class);        this.operations.refresh(Book.class);        StepVerifier.create(this.reactiveOperations.deleteAll(Flux.fromIterable(Arrays.asList(                createBook("deleteAllCollections-2", "Mon livre 7", "Ma description 7", 10d, null),                createBook("deleteAllCollections-3", "Mon livre 8", "Ma description 8", 10d, null),                createBook("deleteAllCollections-4", "Mon livre 9", "Ma description 9", 10d, null)        )), Book.class))                .verifyComplete();        this.operations.refresh(Book.class);        assertThat(this.operations.findById(Book.class, "deleteAllCollections-1").isPresent(), is(true));        assertThat(this.operations.findById(Book.class, "deleteAllCollections-2").isPresent(), is(false));        assertThat(this.operations.findById(Book.class, "deleteAllCollections-3").isPresent(), is(false));        assertThat(this.operations.findById(Book.class, "deleteAllCollections-4").isPresent(), is(false));        assertThat(this.operations.findById(Book.class, "deleteAllCollections-5").isPresent(), is(true));    }    @Test    void deleteById() {        StepVerifier.create(this.reactiveOperations.deleteById("1", Book.class))                .verifyComplete();        this.operations.refresh(Book.class);        assertThat(operations.existsById(Book.class, "1"), is(false));    }    @Test    void delete() {        StepVerifier.create(this.reactiveOperations.delete(createBook("1", "Mon livre", "Ma description", 10d, null), Book.class))                .verifyComplete();        this.operations.refresh(Book.class);        assertThat(operations.existsById(Book.class, "1"), is(false));    }    private List<Book> initializeData() {        List<Book> books = Arrays.asList(createBook("1", "Mon livre", "Ma description", 10d, null));        operations.deleteAll(Book.class);        operations.bulkIndex(books, Book.class);        operations.refresh(Book.class);        return books;    }    private Book createBook(String id, String title, String description, Double price, LocalDate publication) {        return Book.builder()                .documentId(id)                .title(title)                .description(description)                .price(price)                .publication(publication)                .build();    }}