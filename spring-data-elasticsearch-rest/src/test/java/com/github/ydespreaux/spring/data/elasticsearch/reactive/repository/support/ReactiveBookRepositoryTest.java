/* * Copyright (C) 2018 Yoann Despréaux * * This program is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; see the file COPYING . If not, write to the * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. * * Please send bugreports with examples or suggestions to yoann.despreaux@believeit.fr */package com.github.ydespreaux.spring.data.elasticsearch.reactive.repository.support;import com.github.ydespreaux.spring.data.elasticsearch.client.ClientLoggerAspect;import com.github.ydespreaux.spring.data.elasticsearch.configuration.ReactiveElasticsearchConfiguration;import com.github.ydespreaux.spring.data.elasticsearch.entities.Book;import com.github.ydespreaux.spring.data.elasticsearch.reactive.repositories.synonyms.ReactiveBookRepository;import com.github.ydespreaux.spring.data.elasticsearch.repository.config.EnableReactiveElasticsearchRepositories;import org.elasticsearch.index.query.QueryBuilders;import org.junit.jupiter.api.Tag;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.EnableAutoConfiguration;import org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.EnableAspectJAutoProxy;import org.springframework.context.annotation.Profile;import org.springframework.data.domain.Sort;import reactor.test.StepVerifier;import java.time.LocalDate;import java.util.Arrays;import java.util.Comparator;import java.util.List;import java.util.UUID;import static org.hamcrest.MatcherAssert.assertThat;import static org.hamcrest.Matchers.*;/** * @author Yoann Despréaux * @since 1.0.0 */@Tag("integration-nested")@SpringBootTest(classes = {        RestClientAutoConfiguration.class,        ReactiveBookRepositoryTest.ElasticsearchConfiguration.class})@Profile("test-no-template")public class ReactiveBookRepositoryTest {    private static List<Book> books = Arrays.asList(            Book.builder()                    .documentId("1")                    .title("Black City Parade")                    .description("Exceptionnel : pour la 1ère fois ! Indochine records et Sony Music sont fiers de proposer les rééditions des 12 albums studio d’Indochine...")                    .price(15d)                    .publication(LocalDate.of(2015, 10, 25))                    .build(),            Book.builder()                    .documentId("2")                    .title("Blake et Mortimer - Tome 25 : La vallée des immortels")                    .description("À Lhassa, le palais impérial du dictateur Basam-Damdu est anéanti par une escadrille d’Espadons, et le monde, soulagé, fête la fin de la troisième guerre mondiale...")                    .price(25d)                    .publication(LocalDate.of(2016, 5, 1))                    .build(),            Book.builder()                    .documentId("3")                    .title("Et puis Colette")                    .description("Anouk, trentenaire parisienne enfermée dans la routine, vient d’apprendre le décès de sa soeur...")                    .price(9.99d)                    .publication(LocalDate.of(2017, 2, 1))                    .build(),            Book.builder()                    .documentId("4")                    .title("Live Is love Double Vinyle")                    .description("Thomas s’est pour ce disque mis à nu, sans concession aucune...")                    .price(12.20d)                    .publication(LocalDate.of(2018, 7, 10))                    .build(),            Book.builder()                    .documentId("5")                    .title("Zorro - Cicatrices Tome 01 : Zorro")                    .description("Zorro est toujours Don Diego de la Vega sous le masque, et il défend toujours la veuve et l’orphelin grâce à son fouet et son épée. Mais il est cette fois aux prises avec l’amour !")                    .price(5d)                    .build()    );    @SuppressWarnings("SpringJavaInjectionPointsAutowiringInspection")    @Autowired    private ReactiveBookRepository repository;    @Test    void findById() {        Book myBook = books.get(0);        StepVerifier.create(this.repository.findById(myBook.getDocumentId()))                .consumeNextWith(book -> {                    assertThat(book.getDocumentId(), is(equalTo(myBook.getDocumentId())));                    assertThat(book.getTitle(), is(equalTo(myBook.getTitle())));                    assertThat(book.getDescription(), is(equalTo(myBook.getDescription())));                    assertThat(book.getPrice(), is(equalTo(myBook.getPrice())));                    assertThat(book.getPublication(), is(equalTo(myBook.getPublication())));                    assertThat(book.getVersion(), is(equalTo(1L)));                })                .verifyComplete();    }    @Test    void findByIdNotFound() {        StepVerifier.create(this.repository.findById(UUID.randomUUID().toString()))                .verifyComplete();    }    @Test    void existsById() {        Book myBook = books.get(0);        StepVerifier.create(this.repository.existsById(myBook.getDocumentId()))                .expectNext(true)                .verifyComplete();    }    @Test    void notExistsById() {        StepVerifier.create(this.repository.existsById(UUID.randomUUID().toString()))                .expectNext(false)                .verifyComplete();    }    @Test    void searchByPrice_withoutSort() {        StepVerifier.create(this.repository.findByQuery(QueryBuilders.rangeQuery("price").from(5).to(10), (Sort) null))                .consumeNextWith(book -> {                    assertThat(((Book) book).getDocumentId(), is(notNullValue()));                    assertThat(((Book) book).getVersion(), is(notNullValue()));                })                .consumeNextWith(book -> {                    assertThat(((Book) book).getDocumentId(), is(notNullValue()));                    assertThat(((Book) book).getVersion(), is(notNullValue()));                })                .verifyComplete();    }    @Test    void searchByPrice_withSortByPrice() {        StepVerifier.create(this.repository.findByQuery(QueryBuilders.rangeQuery("price").from(5).to(10), Sort.by(Sort.Direction.DESC, "price")))                .consumeNextWith(book -> {                    assertThat((((Book) book).getTitle()), is(equalTo(books.get(2).getTitle())));                    assertThat(((Book) book).getDocumentId(), is(equalTo(books.get(2).getDocumentId())));                    assertThat(((Book) book).getVersion(), is(notNullValue()));                })                .consumeNextWith(book -> {                    assertThat((((Book) book).getTitle()), is(equalTo(books.get(4).getTitle())));                    assertThat(((Book) book).getDocumentId(), is(equalTo(books.get(4).getDocumentId())));                    assertThat(((Book) book).getVersion(), is(notNullValue()));                })                .verifyComplete();    }    @Test    void findByDescriptionContains() {        StepVerifier.create(this.repository.findByDescriptionContains("pour").sort(new BookComparator()))                .expectNext(books.get(0), books.get(3))                .verifyComplete();    }    @Test    void findByDescriptionNotContains() {        StepVerifier.create(this.repository.findByDescriptionNotContains("pour").sort(new BookComparator()))                .expectNext(books.get(1), books.get(2), books.get(4))                .verifyComplete();    }    @Test    void findByDescriptionContaining() {        StepVerifier.create(this.repository.findByDescriptionContaining("pour").sort(new BookComparator()))                .expectNext(books.get(0), books.get(3))                .verifyComplete();    }    @Test    void findByDescriptionNotContaining() {        StepVerifier.create(this.repository.findByDescriptionNotContaining("pour").sort(new BookComparator()))                .expectNext(books.get(1), books.get(2), books.get(4))                .verifyComplete();    }    @Test    void findByDescriptionContainsWithSynonym() {        StepVerifier.create(this.repository.findByDescriptionContains("for").sort(new BookComparator()))                .expectNext(books.get(0), books.get(3))                .verifyComplete();    }    @Test    void findByDescriptionEndsWith() {        StepVerifier.create(this.repository.findByDescriptionEndsWith("...").sort(new BookComparator()))                .expectNext(books.get(0), books.get(1), books.get(2), books.get(3))                .verifyComplete();    }    @Test    void findByDescriptionEndingWith() {        StepVerifier.create(this.repository.findByDescriptionEndingWith("...").sort(new BookComparator()))                .expectNext(books.get(0), books.get(1), books.get(2), books.get(3))                .verifyComplete();    }    @Test    void findByDescriptionStartsWith() {        StepVerifier.create(this.repository.findByDescriptionStartsWith("Zorro"))                .expectNext(books.get(4))                .verifyComplete();    }    @Test    void findByTitleIn() {        StepVerifier.create(this.repository.findByTitleIn(                new String[]{                        books.get(0).getTitle(),                        books.get(3).getTitle()                }        ).sort(new BookComparator()))                .expectNext(books.get(0), books.get(3))                .verifyComplete();    }    @Test    void findByTitleNotIn() {        StepVerifier.create(this.repository.findByTitleNotIn(                new String[]{                        books.get(0).getTitle(),                        books.get(3).getTitle()                }        ).sort(new BookComparator()))                .expectNext(books.get(1), books.get(2), books.get(4))                .verifyComplete();    }    @Test    void findByTitleInWithCollections() {        StepVerifier.create(this.repository.findByTitleIn(                Arrays.asList(                        books.get(0).getTitle(),                        books.get(3).getTitle()                )        ).sort(new BookComparator()))                .expectNext(books.get(0), books.get(3))                .verifyComplete();    }    @Test    void findByTitleNotInWithCollections() {        StepVerifier.create(this.repository.findByTitleNotIn(                Arrays.asList(                        books.get(0).getTitle(),                        books.get(3).getTitle()                )        ).sort(new BookComparator()))                .expectNext(books.get(1), books.get(2), books.get(4))                .verifyComplete();    }    @Test    void findByDescriptionMatches() {        StepVerifier.create(this.repository.findByDescriptionMatches("Indochine").sort(new BookComparator()))                .expectNext(books.get(0))                .verifyComplete();    }    @Test    void findByDescriptionLike() {        StepVerifier.create(this.repository.findByDescriptionLike("Indochine").sort(new BookComparator()))                .expectNext(books.get(0))                .verifyComplete();    }    @Test    void findByDescriptionNotLike() {        StepVerifier.create(this.repository.findByDescriptionNotLike("Indochine").sort(new BookComparator()))                .expectNext(books.get(1), books.get(2), books.get(3), books.get(4))                .verifyComplete();    }    @Test    void findByPublication() {        StepVerifier.create(this.repository.findByPublication(LocalDate.of(2016, 5, 1)).sort(new BookComparator()))                .expectNext(books.get(1))                .verifyComplete();    }    @Test    void findByPublicationAfter() {        StepVerifier.create(this.repository.findByPublicationAfter(LocalDate.of(2016, 5, 1)).sort(new BookComparator()))                .expectNext(books.get(1), books.get(2), books.get(3))                .verifyComplete();    }    @Test    void findByPublicationBefore() {        StepVerifier.create(this.repository.findByPublicationBefore(LocalDate.of(2016, 5, 1)).sort(new BookComparator()))                .expectNext(books.get(0), books.get(1))                .verifyComplete();    }    @Test    void findByPublicationBetween() {        StepVerifier.create(this.repository.findByPublicationBetween(LocalDate.of(2016, 5, 1), LocalDate.of(2017, 2, 1)).sort(new BookComparator()))                .expectNext(books.get(1), books.get(2))                .verifyComplete();    }    @Test    void findByPriceGreaterThan() {        StepVerifier.create(this.repository.findByPriceGreaterThan(9.99d).sort(new BookComparator()))                .expectNext(books.get(0), books.get(1), books.get(3))                .verifyComplete();    }    @Test    void findByPriceLessThan() {        StepVerifier.create(this.repository.findByPriceLessThan(9.99d))                .expectNext(books.get(4))                .verifyComplete();    }    @Test    void findByPriceBetween() {        StepVerifier.create(this.repository.findByPriceBetween(10, 20).sort(new BookComparator()))                .expectNext(books.get(0), books.get(3))                .verifyComplete();    }    @Configuration    @EnableAspectJAutoProxy    @EnableAutoConfiguration    @EnableReactiveElasticsearchRepositories(            basePackages = "com.github.ydespreaux.spring.data.elasticsearch.reactive.repositories.synonyms")    static class ElasticsearchConfiguration extends ReactiveElasticsearchConfiguration {        @Bean        ClientLoggerAspect clientLoggerAspect() {            return new ClientLoggerAspect();        }    }    private static class BookComparator implements Comparator<Book> {        @Override        public int compare(Book book, Book t1) {            return book.getDocumentId().compareTo(t1.getDocumentId());        }    }}