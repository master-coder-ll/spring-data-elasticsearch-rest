/* * Copyright (C) 2018 Yoann Despréaux * * This program is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; see the file COPYING . If not, write to the * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. * * Please send bugreports with examples or suggestions to yoann.despreaux@believeit.fr */package com.github.ydespreaux.spring.data.elasticsearch.repository.support;import com.github.ydespreaux.spring.data.elasticsearch.configuration.ElasticsearchSynonymsConfiguration;import com.github.ydespreaux.spring.data.elasticsearch.core.ElasticsearchOperations;import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsRequest;import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse;import org.elasticsearch.action.admin.indices.settings.get.GetSettingsRequest;import org.elasticsearch.action.admin.indices.settings.get.GetSettingsResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.client.RestHighLevelClient;import org.elasticsearch.common.collect.ImmutableOpenMap;import org.elasticsearch.common.settings.Settings;import org.hamcrest.Matchers;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.context.annotation.Profile;import org.springframework.test.annotation.DirtiesContext;import org.springframework.test.context.junit4.SpringRunner;import static org.hamcrest.Matchers.equalTo;import static org.hamcrest.Matchers.is;import static org.junit.Assert.assertThat;/** * @author Yoann Despréaux * @since 1.0.0 */@DirtiesContext@RunWith(SpringRunner.class)@SpringBootTest(classes = {        RestClientAutoConfiguration.class,        ElasticsearchSynonymsConfiguration.class})@Profile("test-no-template")public class ITBookRepositoryContextTest {    private static final String INDEX_BOOK_NAME = "books";    @Autowired    private ElasticsearchOperations elasticsearchOperations;    @Autowired    private RestHighLevelClient client;    @Test    public void context() throws Exception {        assertThat(this.elasticsearchOperations.indexExists(INDEX_BOOK_NAME), Matchers.is(true));        GetMappingsRequest mappingsRequest = new GetMappingsRequest()                .indices(INDEX_BOOK_NAME);        GetMappingsResponse response = this.client.indices().getMapping(mappingsRequest, RequestOptions.DEFAULT);        assertThat(response.getMappings().containsKey(INDEX_BOOK_NAME), is(true));        assertThat(response.getMappings().get(INDEX_BOOK_NAME).containsKey("book"), is(true));        GetSettingsRequest settingsRequest = new GetSettingsRequest()                .indices(INDEX_BOOK_NAME);        GetSettingsResponse settingsResponse = this.client.indices().getSettings(settingsRequest, RequestOptions.DEFAULT);        ImmutableOpenMap<String, Settings> indexSettings = settingsResponse.getIndexToSettings();        assertThat(indexSettings.containsKey(INDEX_BOOK_NAME), is(true));        Settings settings = indexSettings.get(INDEX_BOOK_NAME);        assertThat(settings.get("index.refresh_interval"), is(equalTo("1s")));        assertThat(settings.get("index.number_of_shards"), is(equalTo("1")));        assertThat(settings.get("index.number_of_replicas"), is(equalTo("1")));        assertThat(settings.get("index.store.type"), is(equalTo("fs")));    }}