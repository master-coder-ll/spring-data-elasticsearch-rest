/* * Copyright (C) 2018 Yoann Despréaux * * This program is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; see the file COPYING . If not, write to the * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. * * Please send bugreports with examples or suggestions to yoann.despreaux@believeit.fr */package com.github.ydespreaux.spring.data.elasticsearch.repository.support;import com.github.ydespreaux.spring.data.elasticsearch.AbstractElasticsearchTest;import com.github.ydespreaux.spring.data.elasticsearch.client.ClientLoggerAspect;import com.github.ydespreaux.spring.data.elasticsearch.configuration.ElasticsearchConfigurationSupport;import com.github.ydespreaux.spring.data.elasticsearch.core.query.Criteria;import com.github.ydespreaux.spring.data.elasticsearch.core.scroll.ScrolledPage;import com.github.ydespreaux.spring.data.elasticsearch.entities.Article;import com.github.ydespreaux.spring.data.elasticsearch.entities.ArticleInfo;import com.github.ydespreaux.spring.data.elasticsearch.repositories.template.ArticleRepository;import com.github.ydespreaux.spring.data.elasticsearch.repository.config.EnableElasticsearchRepositories;import com.github.ydespreaux.testcontainers.elasticsearch.ElasticsearchContainer;import org.elasticsearch.index.query.QueryBuilders;import org.junit.Before;import org.junit.ClassRule;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.EnableAutoConfiguration;import org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.EnableAspectJAutoProxy;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.test.context.junit4.SpringRunner;import java.time.Duration;import java.util.ArrayList;import java.util.List;import java.util.Optional;import java.util.UUID;import static org.hamcrest.Matchers.*;import static org.junit.Assert.assertThat;import static org.junit.Assert.assertTrue;/** * @author Yoann Despréaux * @since 1.0.0 */@RunWith(SpringRunner.class)@SpringBootTest(classes = {        RestClientAutoConfiguration.class,        ITArticleRepositoryTest.ElasticsearchConfiguration.class})public class ITArticleRepositoryTest extends AbstractElasticsearchTest<Article> {    @ClassRule    public static final ElasticsearchContainer elasticContainer = new ElasticsearchContainer("6.4.2");    @Autowired    private ArticleRepository repository;    public ITArticleRepositoryTest() {        super(Article.class);    }    @Override    protected List<Article> generateData() {        List<Article> articles = new ArrayList<>();        articles.add(createArticle("Article1", "Description de l'article 1 - City", Article.EnumEntrepot.E1));        articles.add(createArticle("Article2", "Description de l'article 2 - Product", Article.EnumEntrepot.E2));        articles.add(createArticle("Article3", "Description de l'article 3 - Company", Article.EnumEntrepot.E3));        articles.add(createArticle("Article4", "Description de l'article 4 - Step", Article.EnumEntrepot.E1));        articles.add(createArticle("Article5", "Description de l'article 5 - World", Article.EnumEntrepot.E1));        return articles;    }    /**     * @param name     * @param description     * @param entrepot     * @return     */    protected Article createArticle(String name, String description, Article.EnumEntrepot entrepot) {        return Article.builder()                .name(name)                .description(description)                .entrepot(entrepot)                .build();    }    @Before    public void setUp() throws InterruptedException {        cleanData();    }    @Test    public void findById() throws InterruptedException {        List<Article> data = insertData();        Article articleIndexed = data.get(0);        Optional<Article> optionalArticle = this.repository.findById(articleIndexed.getDocumentId());        assertTrue(optionalArticle.isPresent());        Article articleLoaded = optionalArticle.get();        assertThat(articleLoaded.getDocumentId(), is(equalTo(articleIndexed.getDocumentId())));        assertThat(articleLoaded.getName(), is(equalTo(articleIndexed.getName())));        assertThat(articleLoaded.getDescription(), is(equalTo(articleIndexed.getDescription())));        assertThat(articleLoaded.getEntrepot(), is(equalTo(articleIndexed.getEntrepot())));        assertThat(articleLoaded.getDocumentVersion(), is(equalTo(1L)));    }    @Test    public void existsById() throws InterruptedException {        List<Article> data = insertData();        Article articleIndexed = data.get(0);        assertThat(this.repository.existsById(articleIndexed.getDocumentId()), is(true));    }    @Test    public void findByIdNotFound() throws InterruptedException {        insertData();        Optional<Article> optionalArticle = this.repository.findById(UUID.randomUUID().toString());        assertThat(optionalArticle.isPresent(), is(false));    }    @Test    public void notExistsById() throws InterruptedException {        insertData();        assertThat(this.repository.existsById(UUID.randomUUID().toString()), is(false));    }    @Test    public void findByNameQueryNotExists() throws InterruptedException {        insertData();        Article result = this.repository.findByNameQuery("Article-undefined");        assertThat(result, is(nullValue()));    }    @Test    public void searchByEntrepot_withoutSort() throws InterruptedException {        insertData();        List<Article> result = this.repository.findByQuery(QueryBuilders.matchQuery("entrepot", "E1"), (Sort) null);        assertThat(result.size(), is(equalTo(3)));        for (Article article : result) {            assertThat(article.getDocumentId(), is(notNullValue()));            assertThat(article.getDocumentVersion(), is(notNullValue()));        }    }    @Test    public void searchByEntrepot_withSort() throws InterruptedException {        insertData();        List<Article> result = this.repository.findByQuery(QueryBuilders.matchQuery("entrepot", "E1"), Sort.by(Sort.Direction.DESC, "name"));        assertThat(result.size(), is(equalTo(3)));        for (Article article : result) {            assertThat(article.getDocumentId(), is(notNullValue()));            assertThat(article.getDocumentVersion(), is(notNullValue()));        }        assertThat(result.get(0).getName(), is(equalTo("Article5")));        assertThat(result.get(1).getName(), is(equalTo("Article4")));        assertThat(result.get(2).getName(), is(equalTo("Article1")));    }    @Test    public void searchArticleInfoByEntrepot_withSort() throws InterruptedException {        insertData();        List<ArticleInfo> result = this.repository.findByQuery(QueryBuilders.matchQuery("entrepot", "E1"), Sort.by(Sort.Direction.DESC, "name"), ArticleInfo.class);        assertThat(result.size(), is(equalTo(3)));        for (ArticleInfo article : result) {            assertThat(article.getDocumentId(), is(notNullValue()));        }        assertThat(result.get(0).getName(), is(equalTo("Article5")));        assertThat(result.get(1).getName(), is(equalTo("Article4")));        assertThat(result.get(2).getName(), is(equalTo("Article1")));    }    @Test    public void searchByDescription_withSort() throws InterruptedException {        insertData();        List<Article> result = this.repository.findByQuery(QueryBuilders.matchPhraseQuery("description", "Description"), Sort.by(Sort.Direction.ASC, "name"));        assertThat(result.size(), is(equalTo(5)));        for (Article article : result) {            assertThat(article.getDocumentId(), is(notNullValue()));            assertThat(article.getDocumentVersion(), is(notNullValue()));        }        assertThat(result.get(0).getName(), is(equalTo("Article1")));        assertThat(result.get(1).getName(), is(equalTo("Article2")));        assertThat(result.get(2).getName(), is(equalTo("Article3")));        assertThat(result.get(3).getName(), is(equalTo("Article4")));        assertThat(result.get(4).getName(), is(equalTo("Article5")));    }    @Test    public void searchByDescription_withScroll() throws InterruptedException {        insertData();        Pageable pageable = PageRequest.of(0, 2, Sort.by(Sort.Direction.ASC, "name"));        Duration scrollTime = Duration.ofMinutes(1);        ScrolledPage<Article> result = this.repository.findByQuery(QueryBuilders.matchAllQuery(), pageable);        String scrollId = result.getScrollId();        assertThat(scrollId, is(notNullValue()));        assertThat(result.getTotalElements(), is(equalTo(5L)));        assertThat(result.getContent().size(), is(equalTo(2)));        assertThat(result.getContent().get(0).getName(), is(equalTo("Article1")));        assertThat(result.getContent().get(1).getName(), is(equalTo("Article2")));        result = this.repository.continueScroll(scrollId, scrollTime);        assertThat(result.getTotalElements(), is(equalTo(5L)));        assertThat(result.getContent().size(), is(equalTo(2)));        assertThat(result.getContent().get(0).getName(), is(equalTo("Article3")));        assertThat(result.getContent().get(1).getName(), is(equalTo("Article4")));        result = this.repository.continueScroll(scrollId, scrollTime);        assertThat(result.getTotalElements(), is(equalTo(5L)));        assertThat(result.getContent().size(), is(equalTo(1)));        assertThat(result.getContent().get(0).getName(), is(equalTo("Article5")));        result = this.repository.continueScroll(scrollId, scrollTime);        assertThat(result.getTotalElements(), is(equalTo(5L)));        assertThat(result.getContent().size(), is(equalTo(0)));    }    @Test    public void searchByAllFields_1_withSort() throws InterruptedException {        insertData();        List<Article> result = this.repository.findByQuery(QueryBuilders.matchPhraseQuery("search_fields", "City"), Sort.by(Sort.Direction.ASC, "name"));        assertThat(result.size(), is(equalTo(1)));        for (Article article : result) {            assertThat(article.getDocumentId(), is(notNullValue()));            assertThat(article.getDocumentVersion(), is(notNullValue()));        }        assertThat(result.get(0).getName(), is(equalTo("Article1")));    }    @Test    public void searchByAllFields_2_withSort() throws InterruptedException {        insertData();        List<Article> result = this.repository.findByQuery(QueryBuilders.matchPhraseQuery("search_fields", "E2"), Sort.by(Sort.Direction.ASC, "name"));        assertThat(result.size(), is(equalTo(1)));        for (Article article : result) {            assertThat(article.getDocumentId(), is(notNullValue()));            assertThat(article.getDocumentVersion(), is(notNullValue()));        }        assertThat(result.get(0).getName(), is(equalTo("Article2")));    }    @Test    public void searchArticleInfoByDescription_withScroll() throws InterruptedException {        insertData();        Pageable pageable = PageRequest.of(0, 2, Sort.by(Sort.Direction.ASC, "name"));        ScrolledPage<ArticleInfo> result = this.repository.findByQuery(QueryBuilders.matchAllQuery(), pageable, ArticleInfo.class);        assertThat(result.getScrollId(), is(notNullValue()));        assertThat(result.getTotalElements(), is(equalTo(5L)));        assertThat(result.getContent().size(), is(equalTo(2)));        assertThat(result.getContent().get(0).getName(), is(equalTo("Article1")));        assertThat(result.getContent().get(1).getName(), is(equalTo("Article2")));        result = this.repository.continueScroll(result.getScrollId(), Duration.ofMinutes(1), ArticleInfo.class);        assertThat(result.getTotalElements(), is(equalTo(5L)));        assertThat(result.getContent().size(), is(equalTo(2)));        assertThat(result.getContent().get(0).getName(), is(equalTo("Article3")));        assertThat(result.getContent().get(1).getName(), is(equalTo("Article4")));    }    @Test    public void findArticleByEntrepotOrderByNameDesc() throws InterruptedException {        insertData();        List<Article> result = this.repository.findArticleByEntrepotOrderByNameDesc(Article.EnumEntrepot.E1);        assertThat(result.size(), is(equalTo(3)));        for (Article article : result) {            assertThat(article.getDocumentId(), is(notNullValue()));            assertThat(article.getDocumentVersion(), is(notNullValue()));        }        assertThat(result.get(0).getName(), is(equalTo("Article5")));        assertThat(result.get(1).getName(), is(equalTo("Article4")));        assertThat(result.get(2).getName(), is(equalTo("Article1")));    }    @Test    public void findArticleByEntrepot() throws InterruptedException {        insertData();        Pageable pageable = PageRequest.of(0, 2, Sort.by(Sort.Direction.ASC, "name"));        ScrolledPage<Article> result = this.repository.findArticleByEntrepot(Article.EnumEntrepot.E1, pageable);        assertThat(result.getTotalElements(), is(equalTo(3L)));        for (Article article : result.getContent()) {            assertThat(article.getDocumentId(), is(notNullValue()));            assertThat(article.getDocumentVersion(), is(notNullValue()));        }        assertThat(result.getContent().size(), is(equalTo(2)));        assertThat(result.getContent().get(0).getName(), is(equalTo("Article1")));        assertThat(result.getContent().get(1).getName(), is(equalTo("Article4")));        result = this.repository.continueScroll(result.getScrollId(), Duration.ofMinutes(1));        assertThat(result.getTotalElements(), is(equalTo(3L)));        assertThat(result.getContent().size(), is(equalTo(1)));        assertThat(result.getContent().get(0).getName(), is(equalTo("Article5")));    }    @Test    public void count() throws InterruptedException {        insertData();        assertThat(this.repository.count(), is(equalTo(5L)));    }    @Test    public void countByCriteria() throws InterruptedException {        insertData();        assertThat(this.repository.count(Criteria.where("entrepot").is(Article.EnumEntrepot.E1)), is(equalTo(3L)));    }    @Test    public void countByQuery() throws InterruptedException {        insertData();        assertThat(this.repository.count(QueryBuilders.matchAllQuery()), is(equalTo(5L)));    }    @Test    public void countByEntrepot() throws InterruptedException {        insertData();        assertThat(this.repository.countArticleByEntrepot(Article.EnumEntrepot.E1), is(equalTo(3L)));    }    @Test    public void countByDescription() throws InterruptedException {        insertData();        assertThat(this.repository.countByDescriptionContains("3"), is(equalTo(1L)));    }    @Test    public void searchWithOrCriteria() throws InterruptedException {        insertData();        List<Article> result = this.repository.findByQuery(Criteria.where("name").is("Article1").or("name").is("Article2"), Sort.by(Sort.Direction.ASC, "name"));        assertThat(result.size(), is(equalTo(2)));        assertThat(result.get(0).getName(), is(equalTo("Article1")));        assertThat(result.get(1).getName(), is(equalTo("Article2")));    }    @Test    public void searchWithNegativeCriteria() throws InterruptedException {        insertData();        List<Article> result = this.repository.findByQuery(Criteria.where("name").is("Article1").not(), Sort.by(Sort.Direction.ASC, "name"));        assertThat(result.size(), is(equalTo(4)));        assertThat(result.get(0).getName(), is(equalTo("Article2")));        assertThat(result.get(1).getName(), is(equalTo("Article3")));        assertThat(result.get(2).getName(), is(equalTo("Article4")));        assertThat(result.get(3).getName(), is(equalTo("Article5")));    }    @Test    public void searchWithCriteriaByNameAndEntrepot() throws InterruptedException {        insertData();        List<Article> result = this.repository.findByQuery(Criteria.where("name").is("Article1").and("entrepot").is(Article.EnumEntrepot.E1.name()), Sort.by(Sort.Direction.ASC, "name"));        assertThat(result.size(), is(equalTo(1)));        assertThat(result.get(0).getName(), is(equalTo("Article1")));    }    @Test    public void searchWithCriteriaByNameAndEntrepotWithPageable() throws InterruptedException {        insertData();        ScrolledPage<Article> result = this.repository.findByQuery(Criteria.where("name").is("Article1").and("entrepot").is(Article.EnumEntrepot.E1.name()),                PageRequest.of(0, 10, Sort.by(Sort.Direction.ASC, "name")));        assertThat(result.getTotalElements(), is(equalTo(1L)));        assertThat(result.getContent().get(0).getName(), is(equalTo("Article1")));    }    @Test    public void searchWithCriteriaByNameAndEntrepotWithPageableAndProjection() throws InterruptedException {        insertData();        ScrolledPage<ArticleInfo> result = this.repository.findByQuery(Criteria.where("name").is("Article1").and("entrepot").is(Article.EnumEntrepot.E1.name()),                PageRequest.of(0, 10, Sort.by(Sort.Direction.ASC, "name")),                ArticleInfo.class);        assertThat(result.getTotalElements(), is(equalTo(1L)));        assertThat(result.getContent().get(0).getName(), is(equalTo("Article1")));        this.repository.clearSearch(result.getScrollId());    }    @Test    public void findByEntrepot() throws InterruptedException {        insertData();        List<Article> result = this.repository.findByEntrepot(Article.EnumEntrepot.E1);        assertThat(result.size(), is(equalTo(3)));    }    @Test    public void findByEntrepotOrderByNameAsc() throws InterruptedException {        insertData();        List<Article> result = this.repository.findByEntrepotOrderByNameAsc(Article.EnumEntrepot.E1);        assertThat(result.size(), is(equalTo(3)));        assertThat(result.get(0).getName(), is(equalTo("Article1")));        assertThat(result.get(1).getName(), is(equalTo("Article4")));        assertThat(result.get(2).getName(), is(equalTo("Article5")));    }    @Test    public void findByName() throws InterruptedException {        insertData();        Article result = this.repository.findByName("Article1");        assertThat(result.getName(), is(equalTo("Article1")));    }    @Test    public void findByNameQuery() throws InterruptedException {        insertData();        Article result = this.repository.findByNameQuery("Article1");        assertThat(result.getName(), is(equalTo("Article1")));    }    @Test    public void findByEntrepotQuery() throws InterruptedException {        insertData();        List<Article> result = this.repository.findByEntrepotQuery(Article.EnumEntrepot.E1);        assertThat(result.size(), is(equalTo(3)));    }    @Test    public void findByEntrepotQueryWithPageable() throws InterruptedException {        insertData();        ScrolledPage<Article> result = this.repository.findByEntrepotQuery(Article.EnumEntrepot.E1, PageRequest.of(0, 5));        assertThat(result.getTotalElements(), is(equalTo(3L)));    }    @Test    public void save() {        Article article = createArticle("MyArticle", "MyArticle description", Article.EnumEntrepot.E1);        Article articleIndexed = this.repository.save(article);        this.repository.refresh();        assertThat(articleIndexed.getDocumentId(), is(notNullValue()));        assertThat(articleIndexed.getName(), is(equalTo(article.getName())));        assertThat(articleIndexed.getDescription(), is(equalTo(article.getDescription())));        assertThat(articleIndexed.getEntrepot(), is(equalTo(article.getEntrepot())));        assertThat(articleIndexed.getDocumentVersion(), is(equalTo(1L)));    }    @Test    public void save_bulk() {        List<Article> articles = new ArrayList<>();        articles.add(createArticle("MyArticle1", "MyArticle 1 description", Article.EnumEntrepot.E1));        articles.add(createArticle("MyArticle2", "MyArticle 2 description", Article.EnumEntrepot.E2));        articles.add(createArticle("MyArticle3", "MyArticle 3 description", Article.EnumEntrepot.E1));        articles.add(createArticle("MyArticle4", "MyArticle 4 description", Article.EnumEntrepot.E3));        articles.add(createArticle("MyArticle5", "MyArticle 5 description", Article.EnumEntrepot.E1));        List<Article> articlesIndexed = this.repository.save(articles);        assertThat(articlesIndexed.size(), is(equalTo(articles.size())));        for (Article articleIndexed : articlesIndexed) {            assertThat(articleIndexed.getDocumentId(), is(notNullValue()));            assertThat(articleIndexed.getDocumentVersion(), is(equalTo(1L)));        }    }    @Test    public void deleteById() throws InterruptedException {        List<Article> data = insertData();        Article articleIndexed = data.get(0);        this.repository.deleteById(articleIndexed.getDocumentId());        this.repository.refresh();        Optional<Article> optionalArticle = this.repository.findById(articleIndexed.getDocumentId());        assertThat(optionalArticle.isPresent(), is(false));    }    @Test    public void delete() throws InterruptedException {        List<Article> data = insertData();        Article articleIndexed = data.get(0);        this.repository.delete(articleIndexed);        this.repository.refresh();        Optional<Article> optionalArticle = this.repository.findById(articleIndexed.getDocumentId());        assertThat(optionalArticle.isPresent(), is(false));    }    @Test    public void deleteAll() throws InterruptedException {        List<Article> data = insertData();        this.repository.deleteAll(data);        this.repository.refresh();        for (Article articleIndexed : data) {            Optional<Article> optionalArticle = this.repository.findById(articleIndexed.getDocumentId());            assertThat(optionalArticle.isPresent(), is(false));        }    }    @Configuration    @EnableAspectJAutoProxy    @EnableAutoConfiguration    @EnableElasticsearchRepositories(            basePackages = "com.github.ydespreaux.spring.data.elasticsearch.repositories.template",            namedQueriesLocation = "classpath:named-queries/*-named-queries.properties")    static class ElasticsearchConfiguration extends ElasticsearchConfigurationSupport {        @Bean        ClientLoggerAspect clientLoggerAspect() {            return new ClientLoggerAspect();        }    }}